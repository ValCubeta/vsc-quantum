[
	{
		"label": "print",
		"kind": "Function",
		"detail": "Prints the values",
		"documentation": "fun print(...values, sep := ' ', end := /* sys.EOL */ @JSON.stringify(EOL).replace(/\"/g, '\\'')@) -> Void"
	}, {
		"label": "clean",
		"kind": "Function",
		"detail": "Cleans the console",
		"documentation": "fun clean! -> Void"
	}, {
		"label": "write",
		"kind": "Function",
		"detail": "Prints the values",
		"documentation": "fun write(...values, (sep, end): String) -> Void"
	}, {
		"label": "read",
		"kind": "Function",
		"detail": "Returns a string with the next line given by the user",
		"documentation": "fun read! -> String"
	}, {
		"label": "exit",
		"kind": "Function",
		"detail": "Ends the execution of the program",
		"documentation": "fun exit(code?: Number) -> Void"
	}, {
		"label": "eval",
		"kind": "Function",
		"detail": "Evaluates Quara code and executes it",
		"documentation": "fun eval(string: String) -> Any"
	}, {
		"label": "isempty",
		"kind": "Function",
		"detail": "Returns a boolean indicating if the memory space of the value is clean",
		"documentation": "fun isempty(value: Any) -> Boolean"
	}, {
		"label": "typeof",
		"kind": "Function",
		"detail": "Returns the type of the value",
		"documentation": "fun typeof(value: Any) -> String"
	}, {
		"label": "infy",
		"kind": "Constant",
		"detail": "Represents the infinity",
		"documentation": "infy"
	}, {
		"label": "nanum",
		"kind": "Constant",
		"detail": "Represents a value that is not a number",
		"documentation": "nanum"
	}, {
		"label": "null",
		"kind": "Constant",
		"detail": "Represents a null value",
		"documentation": "null"
	}, {
		"label": "true",
		"kind": "Constant",
		"detail": "Represents a true value",
		"documentation": "true"
	}, {
		"label": "false",
		"kind": "Constant",
		"detail": "Represents a false value",
		"documentation": "false"
	}, {
		"label": "this",
		"kind": "Constant",
		"detail": "Represents the current object",
		"documentation": "this"
	}, {
		"label": "extends",
		"kind": "Keyword",
		"detail": "Inherits all properties from another class or classes",
		"documentation": "class ... extends ... { ... }"
	}, {
		"label": "var",
		"kind": "Keyword",
		"detail": "Declares a block-scoped variable, optionally initializing it to a value",
		"documentation": "var ..."
	}, {
		"label": "const",
		"kind": "Keyword",
		"detail": "Declares a block-scoped constant, initializing it to a value",
		"documentation": "const ... = ..."
	}, {
		"label": "getter",
		"kind": "Keyword",
		"detail": "Declares a function that is executed when you try to read the value of a variable",
		"documentation": "getter for ... { ... }"
	}, {
		"label": "setter",
		"kind": "Keyword",
		"detail": "Declares a function that is executed when you try to write the value of a variable",
		"documentation": "setter for ... { ... }"
	}, {
		"label": "global",
		"kind": "Keyword",
		"documentation": "global var ..."
	}, {
		"label": "later",
		"kind": "Keyword",
		"detail": "Allows you to declare a constant but assign a value later",
		"documentation": "const ... later"
	}, {
		"label": "del",
		"kind": "Keyword",
		"detail": "Deletes a variable",
		"documentation": "del ..."
	}, {
		"label": "with",
		"kind": "Keyword",
		"documentation": "with ... { ... }"
	}, {
		"label": "def",
		"kind": "Keyword",
		"documentation": "def ... { ... }"
	}, {
		"label": "fun",
		"kind": "Keyword",
		"documentation": "fun ...() { ... }"
	}, {
		"label": "publ",
		"kind": "Keyword",
		"documentation": "publ ..."
	}, {
		"label": "priv",
		"kind": "Keyword",
		"documentation": "priv ..."
	}, {
		"label": "prot",
		"kind": "Keyword",
		"documentation": "prot ..."
	}, {
		"label": "static",
		"kind": "Keyword",
		"documentation": "static ..."
	}, {
		"label": "async",
		"kind": "Keyword",
		"documentation": "async fun ...() { ... }"
	}, {
		"label": "await",
		"kind": "Keyword",
		"documentation": "await ...()"
	}, {
		"label": "do",
		"kind": "Keyword",
		"detail": "Shorthand for '```(fun() { ... })()```'",
		"documentation": "do { ... }"
	}, {
		"label": "not",
		"kind": "Keyword",
		"detail": "Returns the opposite of a boolean",
		"documentation": "not ..."
	}, {
		"label": "and",
		"kind": "Keyword",
		"documentation": "... and ..."
	}, {
		"label": "AND",
		"kind": "Keyword",
		"documentation": "... AND ..."
	}, {
		"label": "or",
		"kind": "Keyword",
		"documentation": "... or ..."
	}, {
		"label": "OR",
		"kind": "Keyword",
		"documentation": "... OR ..."
	}, {
		"label": "in",
		"kind": "Keyword",
		"documentation": "... in ..."
	}, {
		"label": "of",
		"kind": "Keyword",
		"documentation": "foreach ... of ... { ... }"
	}, {
		"label": "using",
		"kind": "Keyword",
		"documentation": "using ..."
	}, {
		"label": "try",
		"kind": "Keyword",
		"documentation": "try { ... }"
	}, {
		"label": "catch",
		"kind": "Keyword",
		"documentation": "try { ... } catch ... { ... }"
	}, {
		"label": "if",
		"kind": "Keyword",
		"documentation": "if ... { ... }"
	}, {
		"label": "unless",
		"kind": "Keyword",
		"documentation": "unless ... { ... }"
	}, {
		"label": "else",
		"kind": "Keyword",
		"documentation": [
			"if ... { ... } else { ... }",
			"",
			"switch ... {",
			"\tcase ... { ... }",
			"\telse { ... }",
			"}"
		]
	}, {
		"label": "switch",
		"kind": "Keyword",
		"documentation": "switch ... { ... }"
	}, {
		"label": "case",
		"kind": "Keyword",
		"documentation": [
			"switch ... {",
			"\tcase ... { ... }",
			"}"
		]
	}, {
		"label": "skip",
		"kind": "Keyword",
		"documentation": "skip"
	}, {
		"label": "return",
		"kind": "Keyword",
		"documentation": [
			"fun ...() {",
			"\t// ...",
			"\treturn ...",
			"}"
		]
	}, {
		"label": "throw",
		"kind": "Keyword",
		"detail": "Prints the value to std.err and breaks the execution of your program",
		"documentation": "throw ..."
	}, {
		"label": "for",
		"kind": "Keyword",
		"detail": "A classic for-loop",
		"documentation": "for ..., ..., ... { ... }"
	}, {
		"label": "foreach",
		"kind": "Keyword",
		"documentation": [
			"foreach value in ... { ... }",
			"foreach key of ... { ... }"
		]
	}, {
		"label": "while",
		"kind": "Keyword",
		"detail": "Executes the code inside the braces until the condition is false",
		"documentation": "while ... { ... }"
	}, {
		"label": "until",
		"kind": "Keyword",
		"detail": "Executes the code inside the braces until the condition is true",
		"documentation": "until ... { ... }"
	}, {
		"label": "next",
		"kind": "Keyword",
		"detail": "Goes to the next step in the current loop",
		"documentation": [
			"loop {",
			"\t// ...",
			"\tnext",
			"}"
		]
	}, {
		"label": "break",
		"kind": "Keyword",
		"detail": "Breaks the current loop",
		"documentation": [
			"loop {",
			"\t// ...",
			"\tbreak",
			"}"
		]
	}, {
		"label": "loop",
		"kind": "Keyword",
		"detail": "Shorthand for '```while true { ... }```'",
		"documentation": "loop { ... }"
	}, {
		"label": "new",
		"kind": "Keyword",
		"documentation": "new ...()"
	}, {
		"label": "as",
		"kind": "Keyword",
		"documentation": "using ... as ..."
	}, {
		"label": "Any",
		"kind": "Struct",
		"documentation": "def Any: Boolean | Number | Object"
	}, {
		"label": "Boolean",
		"kind": "Constructor",
		"documentation": [
			"def Boolean: true | false",
			"fun Boolean(value: Any) -> Boolean"
		]
	}, {
		"label": "Number",
		"kind": "Constructor",
		"documentation": "fun Number(value: Any)"
	}, {
		"label": "String",
		"kind": "Constructor",
		"documentation": "fun String(value: Any)"
	}, {
		"label": "Object",
		"kind": "Constructor",
		"documentation": "fun Object(...(key: String, value: Any?)) -> { *: Any? }"
	}, {
		"label": "Array",
		"kind": "Constructor",
		"documentation": [
			"fun Array(value: ((Iter)) = '') -> [*Any]",
			"fun Array(value: Any) -> [Any]",
			"class Array(length: 0 ~ Number.MAX) -> [*Void]"
		]
	}, {
		"label": "Lim",
		"kind": "Constructor",
		"documentation": [
			"// utils.Lim",
			"fun Lim(limit: 0 ~ Number.MAX) -> [Void]"
		]
	}, {
	"label": "Iter",
		"kind": "Constructor",
		"documentation": [
			"// utils.Iter",
			"def Iter: { (Number): Any }"
		]
	}, {
		"label": "Enum",
		"kind": "Constructor",
		"documentation": [
			"// utils.Enum",
			"class Enum(value: ((Iter)))",
			"def Enum: { (String): Number }",
			"fun Enum(...values) -> Enum"
		]
	}, {
		"label": "Function",
		"kind": "Constructor",
		"documentation": "fun Function(params: [String], body: String)"
	}, {
		"label": "Promise",
		"kind": "Constructor",
		"documentation": [
			"fun Promise(function: fun ((resolve, reject)?: fun (value))) -> {",
			"\tvalue: Any?",
			"\tstatus: 'pending' | 'resolved' | 'rejected'",
			"}"
		]
	}, {
		"label": "RegExp",
		"kind": "Constructor",
		"documentation": "fun RegExp(body := '(?:)', flags?: ((Iter)))"
	}, {
		"label": "Range",
		"kind": "Constructor",
		"documentation": "fun Range((a, b?): Number)"
	}, {
		"label": "Void",
		"kind": "Struct",
		"documentation": "def Void"
	}, {
		"label": "Error",
		"kind": "Constructor",
		"documentation": [
			"class Error {",
			"\tname := 'Error'",
			"\tmessage: String",
			"\tfun to_string()",
			"}"
		]
	}, {
		"label": "SyntaxError",
		"kind": "Constructor",
		"documentation": "class SyntaxError extends Error"
	}, {
		"label": "TypeError",
		"kind": "Constructor",
		"documentation": "class TypeError extends Error"
	}, {
		"label": "RangeError",
		"kind": "Constructor",
		"documentation": "class RangeError extends Error"
	}, {
		"label": "ReferenceError",
		"kind": "Constructor",
		"documentation": "class ReferenceError extends Error"
	}, {
		"label": "InternalError",
		"kind": "Constructor",
		"documentation": "class InternalError extends Error"
	}, {
		"label": "__ctor",
		"kind": "Function",
		"documentation": "fun __ctor!"
	}, {
		"label": "__dtor",
		"kind": "Function",
		"documentation": "fun __dtor!"
	}
]