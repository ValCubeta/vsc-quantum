[
	{
		"label": "print",
		"kind": "Function",
		"detail": "Prints the values to stdout",
		"documentation": "fun print(...values, separator := ' ', end := '\\n') -> null"
	},
	{
		"label": "write",
		"kind": "Function",
		"detail": "Prints the values to stdout",
		"documentation": "fun write(...values, separator := '', end := '') -> null"
	},
	{
		"label": "read",
		"kind": "Function",
		"documentation": [
			"fun read(what: matches /\\b(line|word|char)\\b/i = 'line') -> String",
			"fun read(what: matches /\\b(key)\\b/i) -> Number"
		]
	},
  {
		"label": "exit",
		"kind": "Function",
		"documentation": "fun exit(code := 0) -> null"
	},
  {
		"label": "eval",
		"kind": "Function",
		"documentation": "fun eval(code := '') -> Any"
	},
  {
		"label": "isset",
		"kind": "Function",
		"documentation": "fun isset(value: Any) -> Boolean"
	},
  {
		"label": "typeof",
		"kind": "Function",
		"documentation": "fun typeof(value: Any) -> String"
	},
	{
		"label": "infy",
		"kind": "Constant",
		"detail": "Representation of infinity",
		"documentation": "infy"
	},
	{
		"label": "nanum",
		"kind": "Constant",
		"detail": "Represents something that is not a number",
		"documentation": "nanum"
	},
	{
		"label": "null",
		"kind": "Constant",
		"detail": "Represents a nullish value",
		"documentation": "null"
	},
	{
		"label": "true",
		"kind": "Constant",
		"detail": "Represents a truthy value",
		"documentation": "true"
	},
	{
		"label": "false",
		"kind": "Constant",
		"detail": "Represents a falsey value",
		"documentation": "false"
	},
	{
		"label": "this",
		"kind": "Constant",
		"detail": "Represents the current object",
		"documentation": "this"
	},
	{
		"label": "extends",
		"kind": "Keyword",
		"detail": "Inherits all properties from another class",
		"documentation": "class ... extends ... {}"
	},
	{
		"label": "getter",
		"kind": "Keyword",
		"detail": "Declares a function that is executed when you try to read the value of a variable",
		"documentation": "getter for ... {}"
	},
	{
		"label": "setter",
		"kind": "Keyword",
		"documentation": "setter for ... {}"
	},
	{
		"label": "global",
		"kind": "Keyword",
		"documentation": "global varbl ..."
	},
	{
		"label": "later",
		"kind": "Keyword",
		"detail": "Allows you to declare a constant but assign a value later",
		"documentation": "const ... later"
	},
	{
		"label": "delete",
		"kind": "Keyword",
		"detail": "Deletes a variable using its name",
		"documentation": "delete ..."
	},
	{
		"label": "publ",
		"kind": "Keyword",
		"documentation": "publ ..."
	},
	{
		"label": "priv",
		"kind": "Keyword",
		"documentation": "priv ..."
	},
	{
		"label": "prot",
		"kind": "Keyword",
		"documentation": "prot ..."
	},
	{
		"label": "static",
		"kind": "Keyword",
		"documentation": "static ..."
	},
	{
		"label": "async",
		"kind": "Keyword",
		"documentation": "async fun ...() {}"
	},
	{
		"label": "await",
		"kind": "Keyword",
		"documentation": "await ...()"
	},
	{
		"label": "do",
		"kind": "Keyword",
		"detail": "Shorthand for '```() => { ... } ()```'",
		"documentation": "do { ... }"
	},
	{
		"label": "not",
		"kind": "Keyword",
		"detail": "Returns the opposite of a boolean, converts it if necessary",
		"documentation": "not ..."
	},
	{
		"label": "and",
		"kind": "Keyword",
		"documentation": "... and ..."
	},
	{
		"label": "AND",
		"kind": "Keyword",
		"documentation": "... AND ..."
	},
	{
		"label": "or",
		"kind": "Keyword",
		"documentation": "... or ..."
	},
	{
		"label": "OR",
		"kind": "Keyword",
		"documentation": "... OR ..."
	},
	{
		"label": "in",
		"kind": "Keyword",
		"documentation": "... in [...]"
	},
	{
		"label": "of",
		"kind": "Keyword",
		"documentation": "foreach ... of ... {}"
	},
	{
		"label": "using",
		"kind": "Keyword",
		"documentation": "using ..."
	},
	{
		"label": "from",
		"kind": "Keyword",
		"documentation": "using ... from ..."
	},
	{
		"label": "try",
		"kind": "Keyword",
		"documentation": "try {}"
	},
	{
		"label": "catch",
		"kind": "Keyword",
		"documentation": [
			"try {}",
			"catch ... {}"
		]
	},
	{
		"label": "if",
		"kind": "Keyword",
		"documentation": "if ... {}"
	},
	{
		"label": "else",
		"kind": "Keyword",
		"documentation": [
			"if ... {}",
			"else {}"
		]
	},
	{
		"label": "switch",
		"kind": "Keyword",
		"documentation": "switch ... {}"
	},
	{
		"label": "case",
		"kind": "Keyword",
		"documentation": [
			"switch ... {",
			"\tcase ... {}",
			"}"
		]
	},
	{
		"label": "skip",
		"kind": "Keyword",
		"documentation": "skip"
	},
	{
		"label": "return",
		"kind": "Keyword",
		"documentation": [
			"fun ...() {",
			"\treturn ...",
			"}"
		]
	},
	{
		"label": "throw",
		"kind": "Keyword",
		"detail": "Prints the value to std and breaks the execution of your program",
		"documentation": "throw ..."
	},
	{
		"label": "for",
		"kind": "Keyword",
		"detail": "A classic for-loop",
		"documentation": "for ..., ..., ... {}"
	},
	{
		"label": "foreach",
		"kind": "Keyword",
		"documentation": "foreach ... in ... {}"
	},
	{
		"label": "while",
		"kind": "Keyword",
		"detail": "Executes the code inside the braces until the condition is false",
		"documentation": "while ... {}"
	},
	{
		"label": "next",
		"kind": "Keyword",
		"detail": "Goes to the next step in the current loop",
		"documentation": [
			"while ... {",
			"\tnext",
			"}"
		]
	},
	{
		"label": "break",
		"kind": "Keyword",
		"detail": "Breaks the current loop",
		"documentation": [
			"while ... {",
			"\tbreak",
			"}"
		]
	},
	{
		"label": "loop",
		"kind": "Keyword",
		"detail": "Same as '```while true {}```'",
		"documentation": "loop {}"
	},
	{
		"label": "new",
		"kind": "Keyword",
		"documentation": "new /* ... */()"
	},
	{
		"label": "as",
		"kind": "Keyword",
		"documentation": "using /* ... */ as /* ... */ from /* ... */"
	},
	{
		"label": "Any",
		"kind": "Struct",
		"documentation": "type Any: =null | Boolean | Number | Object"
	},
  {
		"label": "Boolean",
		"kind": "Constructor",
		"documentation": [
			"type Boolean: =(true | false)",
			"fun Boolean(from: Any) -> Boolean"
		]
	},
  {
		"label": "Number",
		"kind": "Constructor",
		"documentation": "fun Number(from: Any = '0') -> Number"
	},
  {
		"label": "String",
		"kind": "Constructor",
		"documentation": "fun String(from: Any = 0) -> String"
	},
  {
		"label": "Object",
		"kind": "Constructor",
		"documentation": "fun Object(...(key := '', value: Any = null)) -> { *: Any }"
	},
  {
		"label": "Array",
		"kind": "Constructor",
		"documentation": [
			"fun Array(from: Iter = '') -> [*Any = ...from]",
			"fun Array(from: Any = 0) -> [from]",
			"class Array(length := 0) -> [*Any]"
		]
	},
  {
		"label": "Iter",
		"kind": "Constructor",
		"documentation": "type Iter: { (*: Number): Any }"
	},
  {
		"label": "Enum",
		"kind": "Constructor",
		"documentation": [
			"// using Enum from utils",
			"class Enum(from: Iter) -> Object",
			"type Enum: { key: Any, value: Number, # }",
			"fun Enum(...values) -> Enum"
		]
	},
  {
		"label": "Function",
		"kind": "Constructor",
		"documentation": "fun Function(...params: String, body: String) -> Function"
	},
  {
		"label": "Promise",
		"kind": "Constructor",
		"documentation": [
			"fun Promise((resolve: Function, reject: Function) => {}) -> {",
			"\tvalue: Any = null,",
			"\tstatus: 'pending' | 'resolved' | 'rejected' = 'pending'",
			"}"
		]
	},
  {
		"label": "RegExp",
		"kind": "Constructor",
		"documentation": "fun RegExp(body := '(?:)', flags?: Iter = '') -> RegExp"
	},
  {
		"label": "Range",
		"kind": "Constructor",
		"documentation": [
			"fun Range(a := 0) -> 0 ~ a",
			"fun Range(a := 0, b := 0) -> a ~ b"
		]
	}
]