[
	{
		"label": "print",
		"kind": "Function",
		"detail": "Prints the values to stdout",
		"documentation": "fun print(...values, separator = ' ', end = '\\n') -> null"
	},
	{
		"label": "write",
		"kind": "Function",
		"detail": "Prints the values to stdout",
		"documentation": "fun write(...values, separator = '', end = '') -> null"
	},
	{
		"label": "read",
		"kind": "Function",
		"detail": "",
		"documentation": "fun read! -> String"
	},
  {
		"label": "exit",
		"kind": "Function",
		"detail": "",
		"documentation": "fun exit(code: 0 | 1 = 0) -> null"
	},
  {
		"label": "eval",
		"kind": "Function",
		"detail": "",
		"documentation": "fun eval(code: String) -> Any"
	},
  {
		"label": "isset",
		"kind": "Function",
		"detail": "",
		"documentation": "fun isset(value: Any) -> Boolean"
	},
  {
		"label": "typeof",
		"kind": "Function",
		"detail": "",
		"documentation": "fun typeof(value: Any) -> String"
	},
	{
		"label": "infy",
		"kind": "Constant",
		"detail": "Representation of infinity",
		"documentation": "infy"
	},
	{
		"label": "nanum",
		"kind": "Constant",
		"detail": "Represents something that is not a number",
		"documentation": "nanum"
	},
	{
		"label": "null",
		"kind": "Constant",
		"detail": "Represents a nullish value",
		"documentation": "null"
	},
	{
		"label": "true",
		"kind": "Constant",
		"detail": "Represents a truthy value",
		"documentation": "true"
	},
	{
		"label": "false",
		"kind": "Constant",
		"detail": "Represents a falsey value",
		"documentation": "false"
	},
	{
		"label": "this",
		"kind": "Constant",
		"detail": "Represents the current object",
		"documentation": "this"
	},
	{
		"label": "extends",
		"kind": "Keyword",
		"detail": "Inherits all properties from another class",
		"documentation": "class Array extends Object {}"
	},
	{
		"label": "getter",
		"kind": "Keyword",
		"detail": "Declares a function that is executed when you try to read the value of a variable",
		"documentation": "getter for printHelloWorld: print('Hello world!')"
	},
	{
		"label": "setter",
		"kind": "Keyword",
		"detail": "",
		"documentation": "setter for constant: throw new TypeError(\"Assignment to constant: '$(this.name)'\")"
	},
	{
		"label": "global",
		"kind": "Keyword",
		"detail": "",
		"documentation": "global varbl greeting = 'Hello!'"
	},
	{
		"label": "later",
		"kind": "Keyword",
		"detail": "",
		"documentation": "const result later"
	},
	{
		"label": "delete",
		"kind": "Keyword",
		"detail": "",
		"documentation": "delete unusedConstant"
	},
	{
		"label": "publ",
		"kind": "Keyword",
		"detail": "",
		"documentation": "publ fun create!: #count++"
	},
	{
		"label": "priv",
		"kind": "Keyword",
		"detail": "",
		"documentation": "priv varbl count = 0"
	},
	{
		"label": "static",
		"kind": "Keyword",
		"detail": "",
		"documentation": [
			"publ static fun getCount!:",
			"\treturn this.count"
		]
	},
	{
		"label": "async",
		"kind": "Keyword",
		"detail": "",
		"documentation": "async fun doAsyncStuff!"
	},
	{
		"label": "await",
		"kind": "Keyword",
		"detail": "",
		"documentation": "await doAsyncStuff!"
	},
	{
		"label": "do",
		"kind": "Keyword",
		"detail": "Shorthand for '```() => { ... } ()```'",
		"documentation": "do: print('Hello world!')"
	},
	{
		"label": "not",
		"kind": "Keyword",
		"detail": "",
		"documentation": "not (value: Any) => Boolean(value)? false | true"
	},
	{
		"label": "and",
		"kind": "Keyword",
		"detail": "",
		"documentation": "true and false"
	},
	{
		"label": "AND",
		"kind": "Keyword",
		"detail": "",
		"documentation": "0b10010010 AND 0b10001001"
	},
	{
		"label": "or",
		"kind": "Keyword",
		"detail": "",
		"documentation": "true or false"
	},
	{
		"label": "OR",
		"kind": "Keyword",
		"detail": "",
		"documentation": "0b10011000 OR 0b00100100"
	},
	{
		"label": "in",
		"kind": "Keyword",
		"detail": "",
		"documentation": "36 in 0 ~ 100"
	},
	{
		"label": "of",
		"kind": "Keyword",
		"detail": "",
		"documentation": "foreach key of this: print(key)"
	},
	{
		"label": "using",
		"kind": "Keyword",
		"detail": "",
		"documentation": "using math"
	},
	{
		"label": "from",
		"kind": "Keyword",
		"detail": "",
		"documentation": "using sqrtOf from math"
	},
	{
		"label": "try",
		"kind": "Keyword",
		"detail": "",
		"documentation": "try: a = 5"
	},
	{
		"label": "when",
		"kind": "Keyword",
		"detail": "",
		"documentation": [
			"try: a = 5",
			"when error: print(error)"
		]
	},
	{
		"label": "if",
		"kind": "Keyword",
		"detail": "",
		"documentation": "if 1 + 1 == 2: print('Yes')"
	},
	{
		"label": "else",
		"kind": "Keyword",
		"detail": "",
		"documentation": [
			"if 1 + 1 == 2: print('Yes')",
			"else: print('No')"
		]
	},
	{
		"label": "switch",
		"kind": "Keyword",
		"detail": "",
		"documentation": [
			"using random from math",
			"",
			"switch random(0 ~ 100) {",
			"\t... in 0 ~ 49: print('Between 0 and 49')",
			"\tcase 50: print(\"It's 50\")",
			"\telse: print('Between 51 and 100')",
			"}"
		]
	},
	{
		"label": "case",
		"kind": "Keyword",
		"detail": "",
		"documentation": [
			"using random from math",
			"",
			"switch random(0 ~ 100) {",
			"\tcase 50: print(\"It's 50\")",
			"}"
		]
	},
	{
		"label": "skip",
		"kind": "Keyword",
		"detail": "void",
		"documentation": [
			"on('message', message => {",
			"\tif message.author.id == bot.id: skip",
			"\t// ...",
			"})"
		]
	},
	{
		"label": "return",
		"kind": "Keyword",
		"detail": "",
		"documentation": [
			"fun decorate(text):",
			"\treturn '✨ $(text) ✨'"
		]
	},
	{
		"label": "throw",
		"kind": "Keyword",
		"detail": "Prints the value to std and breaks the execution of your program",
		"documentation": "throw new Error!"
	},
	{
		"label": "for",
		"kind": "Keyword",
		"detail": "A classic for-loop",
		"documentation": [
			"for i = 0, i <= 10, i++:",
			"\tprint('i = $(i)')"
		]
	},
	{
		"label": "foreach",
		"kind": "Keyword",
		"detail": "",
		"documentation": "foreach number in 0 ~ 10: print('Number: $(number)')"
	},
	{
		"label": "while",
		"kind": "Keyword",
		"detail": "Executes the code inside the braces until the condition is false",
		"documentation": [
			"varbl i = 0",
			"while i <= 10: print(i++)"
		]
	},
	{
		"label": "next",
		"kind": "Keyword",
		"detail": "Goes to the next step in the current loop",
		"documentation": [
			"varbl i = 0",
			"while i <= 10 {",
			"\tif i % 2 == 0: next",
			"\tprint(i++)",
			"}"
		]
	},
	{
		"label": "break",
		"kind": "Keyword",
		"detail": "Breaks the current loop",
		"documentation": [
			"loop {",
			"\tif requestToExit: break",
			"}"
		]
	},
	{
		"label": "loop",
		"kind": "Keyword",
		"detail": "Same as '```while true { ... }```'",
		"documentation": "loop: render!"
	},
	{
		"label": "new",
		"kind": "Keyword",
		"detail": "",
		"documentation": "new Array(1, 2, 3)"
	},
	{
		"label": "as",
		"kind": "Keyword",
		"detail": "",
		"documentation": "using sqrtOf as squareRootOf from math"
	},
	{
		"label": "Any",
		"kind": "Struct",
		"detail": "type Any",
		"documentation": "varbl data: Any = read! -<code>- eval(code)"
	},
  {
		"label": "Boolean",
		"kind": "Constructor",
		"detail": "",
		"documentation": "Boolean(0) => false"
	},
  {
		"label": "Number",
		"kind": "Constructor",
		"detail": "",
		"documentation": "Number('123') => 123"
	},
  {
		"label": "String",
		"kind": "Constructor",
		"detail": "",
		"documentation": "String(123) => '123'"
	},
  {
		"label": "Object",
		"kind": "Constructor",
		"detail": "",
		"documentation": "Object('name', 'Jhon') => { name: 'Jhon', # }"
	},
  {
		"label": "Array",
		"kind": "Constructor",
		"detail": "",
		"documentation": "Array(1, 2, 3) == [1, 2, 3]"
	},
  {
		"label": "Tuple",
		"kind": "Constructor",
		"detail": "",
		"documentation": "Tuple([1, 2, 3])"
	},
  {
		"label": "Enum",
		"kind": "Constructor",
		"detail": "",
		"documentation": "Enum([1, 2, 3])"
	},
  {
		"label": "Function",
		"kind": "Constructor",
		"detail": "",
		"documentation": [
			"Function([], 'print(\\'Hello world!\\')')",
			"\t// fun() { print('Hello world!') }"
		]
	},
  {
		"label": "Promise",
		"kind": "Constructor",
		"detail": "",
		"documentation": [
			"Promise((resolve: Function, reject: Function) => {}) -> {",
			"\tvalue: Any = null,",
			"\tstatus: 'pending' | 'resolved' | 'rejected' = 'pending'",
			"}"
		]
	},
  {
		"label": "RegExp",
		"kind": "Constructor",
		"detail": "",
		"documentation": "RegExp('hello', 'i') => /hello/i"
	},
  {
		"label": "Range",
		"kind": "Constructor",
		"detail": "",
		"documentation": "Range(0, 10) => { min: 0, max: 10, # }"
	}
]