{
	"keywords": [
		{
			"name": "if"
		},
		{
			"name": "else"
		},
		{
			"name": "match",
			"description": "Match a value with a given pattern"
		},
		{
			"name": "struct",
			"description": "When defining a class, specify its fields"
		},
		{
			"name": "for",
			"description": "Iterate over the elements of a given value"
		},
		{
			"name": "in",
			"description": "In the for loop, specify the value you want to iterate"
		},
		{
			"name": "with",
			"description": "Make a value global inside a code block. You can access its fields using the dot syntax (e. g. `with self { .x = 5 }`)"
		},
		{
			"name": "class",
			"description": "Define a class, an interface for interacting with a set of values, its fields"
		},
		{
			"name": "impl",
			"description": "Implement a trait for a class"
		},
		{
			"name": "fun",
			"description": "Define a function, a block of code you want to reuse"
		},
		{
			"name": "return",
			"description": "Stop the execution of a function, usually returning a value"
		},
		{
			"name": "priv",
			"description": "Specify that the following value is private. Default for class fields"
		},
		{
			"name": "pub",
			"description": "Specify that the following value is public"
		},
		{
			"name": "where",
			"description": "Specify that a type must implement a trait"
		},
		{
			"name": "false"
		},
		{
			"name": "true"
		},
		{
			"name": "use",
			"description": "Import classes, traits, functions, constants or types from other files"
		},
		{
			"name": "from",
			"description": "When importing something, specify the path where that value is"
		},
		{
			"name": "as",
			"description": "Used to rename things"
		}
	],
	"types": [
		{
			"name": "bool",
			"description": "Represents a state, `true` or `false`"
		},
		{
			"name": "int",
			"description": "The unsigned integer number type. Just a sugar for `std::number::i64`",
			"documentation": [
				"#[allow(non_camel_case_types)]",
				"typedef int = i64"
			]
		},
		{
			"name": "uint",
			"description": "The integer number type. Just a sugar for `std::number::u64`",
			"documentation": [
				"#[allow(non_camel_case_types)]",
				"typedef uint = u64"
			]
		},
		{
			"name": "float",
			"description": "The floating point number type. Just a sugar for `std::number::f64`",
			"documentation": [
				"#[allow(non_camel_case_types)]",
				"typedef float = f64"
			]
		},
		{
			"name": "String",
			"description": "`Vec<u8>` but UTF-8 encoded"
		},
		{
			"name": "Dict",
			"documentation": [
				"typedef Dict<T> = HashMap<String, T>"
			]
		},
		{
			"name": "Vec",
			"description": "A sorted by insertion list of elements"
		}
	],
	"functions": [
		{
			"name": "println",
			"description": "Prints the passed value to the standard output",
			"documentation": [
				"fun println<T>(value: T)",
				"where",
				"\tT: Display",
				"{",
				"\tprint(f\"{value}{EOL}\")",
				"}"
			]
		}
	]
}