{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "JustForFun",
	"scopeName": "source.jff",
	"patterns": [{ "include": "#all" }],
	"repository": {
		"all": {
			"patterns": [


				
				{
					"name": "comment.line.jff",
					"begin": "//",
					"end": "\\n"
				},
				{
					"name": "comment.block.jff",
					"begin": "/\\*",
					"end": "\\*/"
				},



				{
					"begin": "\\(",
					"beginCaptures": {
						"0": { "name": "punctuation.definition.parameters.begin.jff" }
					},
					"patterns": [{ "include": "#all" }],
					"end": "\\)",
					"endCaptures": {
						"0": { "name": "punctuation.definition.parameters.end.jff" }
					}
				},
				{
					"name": "punctuation.terminator.statement.jff",
					"match": ";"
				},



				{
					"name": "string.quoted.double.jff",
					"begin": "\"",
					"beginCaptures": {
						"0": { "name": "meta.template.expression.jff" }
					},
					"patterns": [
						{
							"name": "constant.character.format.jff",
							"match": "%%"
						},
						{
							"name": "constant.character.escape.jff",
							"match": "\\\\."
						},
						{
						  "name": "meta.embedded.jff variable.other.jff",
							"begin": "\\$\\(",
							"beginCaptures": {
								"0": { "name": "punctuation.definition.template-expression.begin.jff" }
							},
							"patterns": [{ "include": "#all" }],
							"end": "\\)",
							"endCaptures": {
								"0": { "name": "punctuation.definition.template-expression.end.jff" }
							}
						}
					],
					"end": "\"|\\n",
					"endCaptures": {
						"0": { "name": "meta.template.expression.jff" }
					}
				},



				{
					"name": "string.regexp.jff",
					"begin": "/",
					"beginCaptures": {
						"0": { "name": "meta.template.expression.jff" }
					},
					"patterns": [
						{
							"name": "constant.character.format.jff",
							"match": "%%"
						},
						{
							"name": "constant.other.character-class.regexp",
							"match": "\\\\[trnvWwDd]"
						},
						{
							"name": "constant.character.escape.jff",
							"match": "\\\\."
						}
					],
					"end": "/[DdGgIiMmSsUuYy]{0,6}|\\n",
					"endCaptures": {
						"0": { "name": "meta.template.expression.jff" }
					}
				},



				{
					"name": "keyword.jff",
				  "match": "(?<![#.\\w])(?:and|AND|or|OR|isinstanceof|in|typeof|import|try|on|if|else|when|is|other|skip|return|foreach|next|break)(?!\\w)"
				},
				{
					"name": "keyword.operator.jff",
				  "match": "[-+/*^]"
				},				
				{
					"name": "keyword.operator.new",
					"match": "(?<![#.\\w])new(?!\\w)"
				},
				{
					"name": "keyword.operator.assignment.jff",
				  "match": "="
				},
				{
					"name": "keyword.operator.accessor.jff punctuation.accessor.jff",
				  "match": "(?<=\\w)[.#](?=[A-Za-z_])"
				},



				{
					"name": "storage.type.jff",
				  "match": "(?<![.\\w])(?:varbl|const|fun|class)(?!\\w)"
				},



				{
					"name": "support.class.builtin.jff",
					"match": "(?<![.\\w])(?:Value|Boolean|Number|String|Object|Array|Function|RegExp|Date)(?!\\w)"
				},



				{
					"name": "entity.name.function.jff",
					"match": "[A-Za-z_]\\w*(?=\\s*(?:\\?\\.)?\\()"
				}
			]



		}
	}
}