{
	"if ... { ... }": {
		"prefix": "if",
		"body": "if ${1:condition} {$2}",
		"description": ""
	},
	"if ... { ... } else { ... }": {
		"prefix": "ifelse",
		"body": "if ${1:condition} {$2} else {$3}",
		"description": ""
	},
	"if ... { ... } else if ... { ... }": {
		"prefix": "ifelseif",
		"body": "if ${1:condition} {$2} else if ${3:otherCondition} {$4}",
		"description": ""
	},
	"if ... { ... } else if ... { ... } else { ... }": {
		"prefix": "ifelseifelse",
		"body": "if ${1:condition} {$2} else if ${3:otherCondition} {$4} else {$5}",
		"description": ""
	},
	"using ... from ...": {
		"prefix": "usingfrom",
		"body": "using ${1:*} from ${2:file}",
		"description": "Allows you use variables from other files (or the entire file if needed)"
	},
	"fun ...(...) { ... }": {
		"prefix": "fun",
		"body": "fun ${1:doCoolStuff}($2) {$3}",
		"description": "Allows you to declare a block of code that you can use multiple times"
	},
	"fun main! { ... }": {
		"prefix": "main",
		"body": "fun main${1:!} {$2}",
		"description": "Entry point of your program"
	},
	"class ... { ... } // new ...()": {
		"prefix": "class",
		"body": [
			"class ${1:CoolObject} {",
			"\tpubl fun creator($3) {$2}",
			"}",
			"// new ${1:CoolObject}($4)"
		],
		"description": "Declares a class that allows you create objects easily"
	},
	"for ..., ..., ... { ... }": {
		"prefix": "for",
		"body": "for ${2:i} = ${3:0}, ${2:i} <= ${4:${5:array}.length}, ${2:i}++ {$1}",
		"description": "Classic for loop. A cool version of a while loop? Yes"
	},
	"foreach ... in ... { ... }": {
		"prefix": "foreachin",
		"body": "foreach ${1:value} in ${2:(iterable)} {$3}",
		"description": "Allows you to loop through the elements of an iterable easily (and it's a bit faster than a while loop)"
	},
	"foreach ... and ... of ... { ... }": {
		"prefix": "foreachof",
		"body": "foreach ${1:key} of ${2:(object)} {$3}",
		"description": "Allows you to iterate through the keys of any object easily (and it's a bit faster than a while loop)"
	},
	"while ... { ... }": {
		"prefix": "while",
		"body": "while ${1:condition} {$2}",
		"description": "Execute the code block as long as the condition can be converted to true"
	},
	"loop { ... }": {
		"prefix": "loop",
		"body": "loop {$1}",
		"description": "Equivalent to 'while true { ... }'"
	},
	"try { ... } on ... { ... }": {
		"prefix": "tryon",
		"body": "try {$1} on ${2:error} {$3}",
		"description": "Allows you to handle possible errors without stopping the execution of your program"
	},
	"getter ... { ... } setter ... { ... }": {
		"prefix": "gettersetter",
		"body": [
			"getter ${1:elpepe} {$2}",
			"setter ${1:elpepe} {$3}"
		],
		"description": "Every variable or constant has a getter and a setter. For example, a constant has a setter that returns a TypeError (but its getter is the default)"
	},
	"const ... = (...)? ... | ...": {
    "prefix": "constternary",
    "body": "const ${1:result} = (${2:condition})? ${3:a} | ${4:b}",
    "description": "Ternary conditional assignment"
  }
}