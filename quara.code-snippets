{
	"if ... { ... }": {
		"prefix": "if",
		"body": "if ${1:condition} {$0}",
		"description": ""
	},
	"else { ... }": {
		"prefix": "else",
		"body": "else {$0}",
		"description": ""
	},
	"else if ... { ... }": {
		"prefix": "else if",
		"body": "else if ${1:condition} {$0}",
		"description": ""
	},
	"using ... from ...": {
		"prefix": "using from",
		"body": "using ${1:*} from ${0:file}",
		"description": "Allows you use variables from other files (or the entire file if needed)"
	},
	"fun ...(...) { ... }": {
		"prefix": "fun",
		"body": "fun ${1:doCoolStuff}($2) {$0}",
		"description": "Allows you to declare a block of code that you can use multiple times"
	},
	"fun main! { ... }": {
		"prefix": "fun main",
		"body": "fun main${1:!} {$0}",
		"description": "Entry point of your program"
	},
	"class ... { // new ...(); publ fun creator(...) { ... } }": {
		"prefix": "class",
		"body": [
			"class ${1:CoolObject} {",
			"\t// new ${1:CoolObject}($2)",
			"\tpubl fun creator($3) {$0}",
			"}",
		],
		"description": "Declares a class that allows you create objects easily"
	},
	"for ..., ..., ... { ... }": {
		"prefix": "for",
		"body": "for ${2:i} = ${3:0}, ${2:i} <= ${5:${4:array}.length}, ${2:i}${6:++} {$0}",
		"description": "Classic for loop. A cool version of a while loop? Yes"
	},
	"foreach ... in ... { ... }": {
		"prefix": "foreach in",
		"body": "foreach ${1:value} in ${2:(iterable)} {$0}",
		"description": "Allows you to loop through the elements of an iterable easily (and it's a bit faster than a while loop)"
	},
	"foreach ... and ... of ... { ... }": {
		"prefix": "foreach of",
		"body": "foreach ${1:key} of ${2:(object)} {$0}",
		"description": "Allows you to iterate through the keys of any object easily (and it's a bit faster than a while loop)"
	},
	"while ... { ... }": {
		"prefix": "while",
		"body": "while ${1:condition} {$0}",
		"description": "Execute the code block as long as the condition can be converted to true"
	},
	"loop { ... }": {
		"prefix": "loop",
		"body": "loop {$0}",
		"description": "Equivalent to 'while true { ... }'"
	},
	"try { ... } catch ... { ... }": {
		"prefix": "try catch",
		"body": "try {$1} catch ${2:error} {$0}",
		"description": "Allows you to handle possible errors without stopping the execution of your program"
	},
	"getter ... { ... } setter ... { ... }": {
		"prefix": "getter setter",
		"body": [
			"getter ${1:name} {$2}",
			"setter ${1:name} {$3}"
		],
		"description": "Every variable or constant has a getter and a setter. For example, a constant has a setter that returns a TypeError (but its getter is the default)"
	},
	"const ... = (...)? ... | ...": {
    "prefix": "const ternary",
    "body": "const ${1:result} = ${3:(${2:condition})}? ${4:a} | ${5:b}",
    "description": "Ternary conditional assignment"
  },
	"switch ... { case ... { ... } }": {
    "prefix": "switch",
    "body": [
			"switch ${1:value} {",
			"\t${4:case ${3:\"$2\"}} {$0}",
			"}"
		],
    "description": "Switch statment"
  },
}