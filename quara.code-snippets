{
	"import ... from ...": {
		"prefix": "importfrom",
		"body": "import ${1:*} from ${2:file}",
		"description": "ALlows you import variables from other files (or the entire file if needed)"
	},
	"fun ...(...) { ... }": {
		"prefix": "fun",
		"body": "fun ${2:doCoolStuff}($3) {$1}",
		"description": "Allows you to declare a block of code that you can use multiple times"
	},
	"fun main! { ... }": {
		"prefix": "main",
		"body": "fun main${2:!} {$1}",
		"description": "Entry point of your program"
	},
	"class ... { ... }": {
		"prefix": "class",
		"body": [
			"class ${2:CoolObject} {",
			"\tpubl fun creator($3) {$1}",
			"}",
			"new ${2:CoolObject}($4)"
		],
		"description": "Declares a class that allows you create objects easily"
	},
	"for ..., ..., ... { ... }": {
		"prefix": "for",
		"body": "for ${2:i} = ${3:0}, ${2:i} <= ${4:array.length}, ${2:i}++ {$1}",
		"description": "Classic for loop. A cool version of a while loop? Yes"
	},
	"foreach ... in ... { ... }": {
		"prefix": "foreachin",
		"body": "foreach ${2:value} in ${3:array} {$1}",
		"description": "Allows you to loop through the elements of an iterable easily (and it's a bit faster than a while loop)"
	},
	"foreach ... and ... of ... { ... }": {
		"prefix": "foreachof",
		"body": "foreach ${2:key} and ${3:value} of ${4:object} {$1}",
		"description": "Allows you to iterate through the keys (and values if needed) of any object easily (and it's a bit faster than a while loop)"
	},
	"while ... { ... }": {
		"prefix": "while",
		"body": "while ${2:condition} {$1}",
		"description": "Execute the code block as long as the condition can be converted to true"
	},
	"try { ... } on ... { ... }": {
		"prefix": "tryon",
		"body": "try {$1} on ${2:error} {$3}",
		"description": "Allows you to handle possible errors without stopping the execution of your program"
	},
	"getter ... { ... } setter ... { ... }": {
		"prefix": "gettersetter",
		"body": [
			"getter ${1:coolName} {$2}",
			"setter ${1:coolName} {$3}"
		],
		"description": "Every variable or constant has a getter and a setter. For example, a constant has a setter that returns a TypeError (but its getter is the default)"
	},
	"... = (...)? ... | ...": {
    "prefix": "ternary",
    "body": "const ${1:result} = (${2:condition})? ${3:a} | ${4:b}",
    "description": "Ternary conditional assignment"
  },
}