{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "Quara",
	"scopeName": "source.qua",
	"patterns": [{ "include": "#all" }],
	"repository": {
		"all": {
			"patterns": [
				{
					"match": "(?i:([a-z_][a-z_0-9]*))\\s*(=>)",
					"captures": {
						"1": {
							"name": "meta.parameter.qua variable.parameter.qua"
						},
						"2": {
							"name": "storage.type.function.arrow.qua meta.arrow.qua"
						}
					}
				}, {
					"begin": "\\(",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.parameters.begin.qua"
						}
					},
					"patterns": [
						{
							"match": "(?<=(?:^|[(,])\\s*)(?i:([a-z_][a-z_0-9]*))\\s*(\\??=(?!=))",
							"captures": {
								"1": {
									"name": "meta.parameter.qua variable.parameter.qua"
								},
								"2": {
									"name": "keyword.operator.assignment.qua"
								}
							}
						}, {
							"include": "#all"
						}
					],
					"end": "\\)",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.parameters.end.qua"
						}
					}
				}, {
					"patterns": [
						{
							"name": "comment.line.qua",
							"begin": "//|#",
							"end": "\\n|$"
						}, {
							"name": "comment.block.qua",
							"begin": "/\\*",
							"end": "\\*/"
						}
					]
				}, {
					"name": "constant.numeric.qua",
					"match": "(?<!(?<!\\.)\\.\\s*|\\w)(?:infy|nanum|(?i:0b[01]+|0x[0-9a-f]+|(?:[0-9]+)(?:(?:\\.[0-9]+)?(?:e[+-]?[0-9]+)?)))(?!\\w)"
				}, {
					"name": "constant.language.qua",
					"match": "(?<!(?<!\\.)\\.\\s*|\\w)(?:true|false|null)(?!\\w)"
				}, {
					"name": "punctuation.terminator.statement.qua",
					"match": ";"
				}, {
					"name": "string.quoted.qua",
					"begin": "\"|'",
					"patterns": [
						{
							"name": "variable.qua",
							"match": "\\$(?i:[a-z_][a-z_0-9]*(?:(\\.)[a-z_][a-z_0-9]*)?)",
							"captures": { "1": {
								"name": "keyword.operator.accessor.qua punctuation.accessor.qua"
							}}
						}, {
							"name": "constant.character.format.qua",
							"match": "%%"
						}, {
							"name": "constant.other.character-class.qua",
							"match": "\\\\[trn]"
						}, {
							"name": "constant.character.escape.qua",
							"match": "\\\\."
						}, {
							"contentName": "variable.qua",
							"begin": "\\$\\(",
							"beginCaptures": {
								"0": {
									"name": "punctuation.definition.template-expression.begin.qua"
								}
							},
							"patterns": [{ "include": "#all" }],
							"end": "\\)",
							"endCaptures": {
								"0": {
									"name": "punctuation.definition.template-expression.end.qua"
								}
							}
						}
					],
					"end": "\\0|\\n"
				}, {
					"name": "string.regexp.qua regexp.qua",
					"begin": "(?<=(?:^|(?:^|\\W)(?:if|unless|while|until|and|or|throw|return|not|switch)|[|=:;,\\[{(<>?])\\s*)/(?![)?*+]|[^/]*$)",
					"patterns": [
						{
							"name": "constant.other.character-class.regexp.qua",
							"match": "\\\\[trnWwDdSs]"
						}, {
							"name": "constant.character.escape.qua",
							"match": "\\\\."
						}
					],
					"end": "/(?i:[dgimsuy]{0,7})|$"
				}, {
					"name": "keyword.qua",
					"match": "(?<!(?<!\\.)\\.\\s*|\\w)(?:with|as|extends|later|del|await|do|not|and|AND|or|OR|in|of|try|catch|if|unless|else|switch|case|skip|return|throw|for|foreach|while|until|next|break|loop)(?!\\w)"
				}, {
					"name": "keyword.other.import.qua",
					"match": "(?<!(?<!\\.)\\.\\s*|\\w)(?:using)(?!\\w)"
				}, {
					"name": "keyword.operator.new.qua",
					"match": "(?<!(?<!\\.)\\.\\s*|\\w)new(?!\\w)"
				}, {
					"name": "keyword.operator.qua",
					"match": "[-+*/^%~?|<>@]|!="
				}, {
					"name": "keyword.operator.assignment.qua",
					"match": "[-+*/^%&|?:]?="
				}, {
					"name": "keyword.operator.accessor.qua punctuation.accessor.qua",
					"match": "\\."
				}, {
					"name": "storage.type.qua",
					"match": "(?<!(?<!\\.)\\.\\s*|\\w)(?:def|global|var|const|fun|class|getter|setter|async|publ|priv|prot|static)(?!\\w)"
				}, {
					"name": "support.class.builtin.qua",
					"match": "(?<!(?<!\\.)\\.\\s*|\\w)(?:Void|Any|Boolean|Number|String|Object|Array|Function|Promise|RegExp|Range|Error|SyntaxError|TypeError|RangeError|ReferenceError|InternalError)(?!\\w)"
				}, {
					"name": "support.function.qua",
					"match": "(?<!\\w)((?<!(?<!\\.)\\.\\s*)(?:print|write|clean|read|exit|eval|isempty|typeof)|__ctor|__dtor)(?!\\w)"
				}, {
					"name": "entity.name.qua",
					"match": "(?<!(?<!\\.)\\.\\s*|\\w)(this|args)(?!\\w)"
				}, {
					"name": "entity.name.function.qua",
					"match": "(?<![0-9])[A-Za-z_]\\w*(?=\\s*(?:\\?\\.\\s*)?(?:\\(|!(?!=)))"
				}
			]
		}
	}
}