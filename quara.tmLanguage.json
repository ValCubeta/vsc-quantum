{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "Quara",
	"scopeName": "source.qua",
	"patterns": [{ "include": "#all" }],
	"repository": {
		"comments": {
			"patterns": [
				{
					"name": "comment.line.qua",
					"begin": "//",
					"end": "\\n"
				},
				{
					"name": "comment.block.qua",
					"begin": "/\\*",
					"end": "\\*/"
				}
			]
		},
		"all": {
			"patterns": [
				{
					"begin": "\\(",
					"beginCaptures": {
						"0": { "name": "punctuation.definition.parameters.begin.qua" }
					},
					"patterns": [{ "include": "#all" }],
					"end": "\\)",
					"endCaptures": {
						"0": { "name": "punctuation.definition.parameters.end.qua" }
					}
				},

				{
					"include": "#comments"
				},
				{
					"name": "constant.numeric.qua",
					"match": "(?<![.\\w])(?:infy|nanu|(?i:0b[01]+|0x[0-9a-f]+|(?:0|0?[1-9][0-9]*)(?:(?:\\.[0-9]+)?(?:e[+-]?[0-9]+)?)))(?!\\w)"
				},
				{
					"name": "constant.language.qua",
					"match": "(?<![.\\w])(?:true|false|null)(?!\\w)"
				},

				{
					"name": "punctuation.terminator.statement.qua",
					"match": ";"
				},


				{
					"name": "string.quoted.double.qua",
					"begin": "\"",
					"beginCaptures": {
						"0": { "name": "meta.template.expression.qua" }
					},
					"patterns": [
						{
							"name": "constant.character.format.qua",
							"match": "%%"
						},
						{
							"name": "constant.other.character-class.qua",
							"match": "\\\\[trnv]"
						},
						{
							"name": "constant.character.escape.qua",
							"match": "\\\\."
						},
						{
							"contentName": "variable.qua",
							"begin": "\\$\\(",
							"beginCaptures": {
								"0": { "name": "punctuation.definition.template-expression.begin.qua" }
							},
							"patterns": [{ "include": "#all" }],
							"end": "\\)",
							"endCaptures": {
								"0": { "name": "punctuation.definition.template-expression.end.qua" }
							}
						}
					],
					"end": "\"|\\n",
					"endCaptures": {
						"0": { "name": "meta.template.expression.qua" }
					}
				},


				{
					"name": "string.regexp.qua regexp.qua",
					"begin": "(?<=(?:^|(?:^|\\W)(?:if|while|and|or|try|return)|[=:;,\\[{(]|<<|>>)\\s*)/(?![)?*+]|[^/]*$)",
					"patterns": [
						{
							"name": "constant.other.character-class.regexp.qua",
							"match": "\\\\[trnvWwDdSs]"
						},
						{
							"name": "constant.character.escape.qua",
							"match": "\\\\."
						}
					],
					"end": "/(?i:[dgimsuy]){0,7}|$"
				},


				{
					"name": "keyword.qua",
					"match": "(?<![.\\w])(?:getter|setter|global|later|delete|publ|priv|static|async|await|generator|do|not|and|AND|or|OR|in|of|import|from|try|on|if|else|elseif|when|is|skip|return|throw|for|foreach|while|next|break)(?!\\w)"
				},
				{
					"name": "keyword.operator.qua",
					"match": "[-+*/^%~?|<>]|!="
				},				
				{
					"begin": "=\\(",
					"beginCaptures": {
						"0": { "name": "keyword.operator.qua" }
					},
					"patterns": [{ "include": "#all" }],
					"end": "\\)>",
					"endCaptures": {
						"0": { "name": "keyword.operator.qua" }
					}
				},				
				{
					"name": "keyword.operator.new.qua",
					"match": "(?<![.\\w])new(?!\\w)"
				},
				{
					"name": "keyword.operator.assignment.qua",
					"match": "="
				},
				{
					"name": "keyword.operator.accessor.qua punctuation.accessor.qua",
					"match": "\\??\\."
				},


				{
					"name": "storage.type.qua",
					"match": "(?<![.\\w])(?:varbl|const|fun|class)(?!\\w)"
				},


				{
					"name": "support.class.builtin.qua",
					"match": "(?<![.\\w])(?:Value|Boolean|Number|String|Object|Array|Function|Promise|RegExp|Date|Range)(?!\\w)"
				},


				{
					"name": "support.function.qua",
					"match": "(?<![.\\w])(?:print|write|isset|typeof|read|exit|eval|instanceof|prototypeof)(?!\\w)"
				},


				{
					"name": "entity.name.qua",
					"match": "(?<![.\\w])this(?!\\w)"
				},
				{
					"name": "entity.name.function.qua",
					"match": "[A-Za-z_]\\w*(?=\\s*(?:\\?\\.\\s*)?[(!])"
				}
			]
		}
	}
}