{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "Quara",
	"scopeName": "source.qua",
	"patterns": [{ "include": "#all" }],
	"repository": {
		"string-patterns": {
			"patterns": [
				{
					"name": "variable.qua",
					"match": "\\$(?i:[a-z_][a-z_0-9]*)"
				},
				{
					"name": "constant.character.format.qua",
					"match": "%%"
				},
				{
					"name": "constant.other.character-class.qua",
					"match": "\\\\[trnv]"
				},
				{
					"name": "constant.character.escape.qua",
					"match": "\\\\."
				},
				{
					"contentName": "variable.qua",
					"begin": "\\$\\(",
					"beginCaptures": {
						"0": { "name": "punctuation.definition.template-expression.begin.qua" }
					},
					"patterns": [{ "include": "#all" }],
					"end": "\\)",
					"endCaptures": {
						"0": { "name": "punctuation.definition.template-expression.end.qua" }
					}
				}
			]
		},
		"all": {
			"patterns": [
				{
					"begin": "\\(",
					"beginCaptures": {
						"0": { "name": "punctuation.definition.parameters.begin.qua" }
					},
					"patterns": [{ "include": "#all" }],
					"end": "\\)",
					"endCaptures": {
						"0": { "name": "punctuation.definition.parameters.end.qua" }
					}
				},


				{
					"patterns": [
						{
							"name": "comment.line.qua",
							"begin": "//",
							"end": "\\n"
						},
						{
							"name": "comment.block.qua",
							"begin": "/\\*",
							"end": "\\*/"
						}
					]
				},


				{
					"name": "constant.numeric.qua",
					"match": "(?<!(?<!\\.)\\.\\s*|\\w)(?:infy|nanum|(?i:0b[01]+|0x[0-9a-f]+|(?:0|0?[1-9][0-9]*)(?:(?:\\.[0-9]+)?(?:e[+-]?[0-9]+)?)))(?!\\w)"
				},
				{
					"name": "constant.language.qua",
					"match": "(?<!(?<!\\.)\\.\\s*|\\w)(?:true|false|null)(?!\\w)"
				},

				{
					"name": "punctuation.terminator.statement.qua",
					"match": ";"
				},


				{
					"name": "string.quoted.double.qua",
					"begin": "\"",
					"patterns": [{ "include": "#string-patterns" }],
					"end": "\"|\\n"
				},
				{
					"name": "string.quoted.single.qua",
					"begin": "'",
					"patterns": [{ "include": "#string-patterns" }],
					"end": "'|\\n"
				},


				{
					"name": "string.regexp.qua regexp.qua",
					"begin": "(?<=(?:^|(?:^|\\W)(?:if|unless|while|until|and|or|throw|return)|[=:;,\\[{(<>?])\\s*)/(?![)?*+]|[^/]*$)",
					"patterns": [
						{
							"name": "constant.other.character-class.regexp.qua",
							"match": "\\\\[trnvWwDdSs]"
						},
						{
							"name": "constant.character.escape.qua",
							"match": "\\\\."
						}
					],
					"end": "/(?i:[dgimsuy]{0,7})|$"
				},


				{
					"name": "keyword.qua",
					"match": "(?<!(?<!\\.)\\.\\s*|\\w)(?:as|extends|later|del|await|do|not|and|AND|or|OR|in|of|using|try|catch|if|unless|else|switch|case|skip|return|throw|for|foreach|while|until|next|break|loop)(?!\\w)"
				},			
				{
					"name": "keyword.operator.qua",
					"match": "[-+*/^%~?|<>]|!="
				},				
				{
					"name": "keyword.operator.new.qua",
					"match": "(?<!(?<!\\.)\\.\\s*|\\w)new(?!\\w)"
				},
				{
					"name": "keyword.operator.assignment.qua",
					"match": ":?="
				},
				{
					"name": "keyword.operator.accessor.qua punctuation.accessor.qua",
					"match": "\\??[.#]"
				},


				{
					"name": "storage.type.qua",
					"match": "(?<!(?<!\\.)\\.\\s*|\\w)(?:type|global|varbl|const|fun|class|getter|setter|async|publ|priv|prot|static)(?!\\w)"
				},


				{
					"name": "support.class.builtin.qua",
					"match": "(?<!(?<!\\.)\\.\\s*|\\w)(?:Any|Boolean|Number|String|Object|Array|Function|Promise|RegExp|Range)(?!\\w)"
				},


				{
					"name": "support.function.qua",
					"match": "(?<!(?<!\\.)\\.\\s*|\\w)(?:print|write|clean|read|exit|eval|isset|typeof)(?!\\w)"
				},


				{
					"name": "entity.name.qua",
					"match": "(?<!(?<!\\.)\\.\\s*|\\w)this(?!\\w)"
				},
				{
					"name": "entity.name.function.qua",
					"match": "(?<!(?<!(?<!\\.)\\.\\s*|\\w)class\\s+[A-Za-z_]*)[A-Za-z_]\\w*(?=\\s*(?:\\?\\.\\s*)?(?:\\(|!(?!=)))"
				}
			]
		}
	}
}