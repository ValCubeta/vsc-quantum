{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "Sunny",
	"scopeName": "source.sny",
	"patterns": [
		{
			"include": "#main"
		}
	],
	"repository": {
		"main": {
			"patterns": [
				{
					"name": "comment.line.sny",
					"begin": "//",
					"end": "\\n"
				},
				{
					"name": "comment.block.sny",
					"begin": "/\\*",
					"end": "\\*/"
				},
				{
					"name": "string.quoted.sny",
					"begin": "'|\"",
					"patterns": [
						{
							"name": "constant.other.character-class.sny",
							"match": "\\\\[trn]"
						},
						{
							"name": "constant.character.escape.sny",
							"match": "\\\\."
						},
						{
							"name": "variable.sny",
							"match": "(\\$)([a-z_A-Z]+(?:\\.[a-z_A-Z]+)*)",
							"captures": {
								"1": {
									"name": "punctuation.definition.template-expression.begin.sny"
								},
								"2": {
									"patterns": [
										{
											"include": "#main"
										}
									]
								}
							}
						},
						{
							"contentName": "variable.sny",
							"begin": "\\$\\(",
							"beginCaptures": {
								"0": {
									"name": "punctuation.definition.template-expression.begin.sny"
								}
							},
							"patterns": [
								{
									"include": "#main"
								}
							],
							"end": "\\)",
							"endCaptures": {
								"0": {
									"name": "punctuation.definition.template-expression.end.sny"
								}
							}
						}
					],
					"end": "\\0|\\n"
				},
				{
					"name": "string.regexp.sny regexp.sny",
					"begin": "$              (?<=(?:^|if|unless|or|when|is|return|throw|not|and|or|in|of|while|until|[^a-z_A-Z\\s])\\s*)/(?![)?*+]|[^/]*\\n)",
					"comment": "Matches if is preceeded by a keyword or an operator and if is not followed by `)`, `?`, `*`, or `+` and there is the end",
					"patterns": [
						{
							"name": "invalid.illegal.sny",
							"match": "\\[\\]|\\{,?\\}|\\\\0"
						},
						{
							"match": "\\^|\\$",
							"name": "keyword.control.anchor.regexp"
						},
						{
							"match": "(?<=\\()(?:\\?:|\\?<?[=!]|\\?i:)",
							"name": "entity.name.sny"
						},
						{
							"match": "\\\\[1-9]",
							"name": "keyword.other.back-reference.regexp"
						},
						{
							"match": "[?+*]|\\{(?:[0-9]+|[0-9]*,[0-9]*)\\}",
							"name": "keyword.operator.snyntifier.regexp"
						},
						{
							"match": "\\|",
							"name": "keyword.operator.or.regexp"
						},
						{
							"name": "constant.other.character-class.regexp.sny",
							"match": "\\\\[trnWwDdSs]"
						},
						{
							"name": "constant.character.escape.sny",
							"match": "\\\\."
						},
						{
							"name": "punctuation.definition.character-class.regexp.sny constant.other.character-class.set.regexp.sny",
							"begin": "\\[(?:(\\^)|(-))?",
							"beginCaptures": {
								"1": {
									"name": "keyword.operator.negation.regexp.sny"
								},
								"2": {
									"name": "punctuation.definition.character-class.regexp.sny constant.other.character-class.set.regexp.sny"
								}
							},
							"patterns": [
								{
									"name": "keyword.operator.sny",
									"match": "-"
								}
							],
							"end": "(-)?\\]|\\n",
							"endCaptures": {
								"1": {
									"name": "punctuation.definition.character-class.regexp.sny constant.other.character-class.set.regexp.sny"
								}
							}
						}
					],
					"end": "/(i|g|ig|gi)(?![a-z_A-Z])|/",
					"endCaptures": {
						"1": {
							"name": "entity.name.sny"
						}
					}
				},
				{
					"name": "constant.numeric.sny",
					"match": "(?<!(?<!\\.)\\.\\s*|[a-z_A-Z0-9])(?:[0-9]+(?:'[0-9]+)*(?:\\.[0-9]+)?(?:[eE][-+]?[0-9]+)?|nanum|infy|0b[01]+|0x[0-9a-fA-F]+)(?![a-z_A-Z])",
					"comment": "1234567890 | 1'234'567'890 | 12345.67890 | 12345e+67890 | nanum | infy | 0b101010 | 0x5050FF"
				},
				{
					"name": "keyword.operator.type.annotation.sny meta.type.annotation.sny",
					"match": ":"
				},
				{
					"name": "keyword.operator.rest.sny",
					"match": "\\.{3}"
				},
				{
					"name": "keyword.operator.sny",
					"match": "[-+/*|]|[=!<>]=?|\\?",
					"comment": "- + / * | == != >= <= > < ?"
				},
				{
					"name": "punctuation.accessor.sny keyword.operator.accessor.sny",
					"match": "\\."
				},
				{
					"name": "keyword.operator.assignment.sny",
					"match": "[+-]?=",
					"comment": "+= -= ="
				},
				{
					"begin": "\\(",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.parameters.begin.sny"
						}
					},
					"patterns": [
						{
							"name": "variable.parameter.sny",
							"match": "(?<!(?<!\\.)\\.\\s*|[a-z_A-Z])[a-z_A-Z]+(?=\\s*=)"
						},
						{
							"include": "#main"
						}
					],
					"end": "\\)",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.parameters.end.sny"
						}
					}
				},
				{
					"match": "(@)\\s*([a-z_A-Z]+)",
					"captures": {
						"1": {
							"name": "keyword.operator.sny"
						},
						"2": {
							"name": "entity.name.function.decorator.sny"
						}
					}
				},
				{
					"name": "keyword.other.import.sny",
					"match": "(?<!(?<!\\.)\\.\\s*|[a-z_A-Z])(?:import|from|as|export)(?![a-z_A-Z])"
				},
				{
					"name": "keyword.sny",
					"match": "(?<!(?<!\\.)\\.\\s*|[a-z_A-Z])(?:if|unless|or|when|is|else|try|catch|then|return|throw|extends|not|and|or|for|in|of|skip|while|until|next|break|loop|del|to)(?![a-z_A-Z])"
				},
				{
					"name": "storage.type.sny",
					"match": "(?<!(?<!\\.)\\.\\s*|[a-z_A-Z])(?:typedef|var|const|fun|class|model|static|private|public)(?![a-z_A-Z])"
				},
				{
					"name": "support.function.builtin.sny",
					"match": "(?<!(?<!\\.)\\.\\s*|[a-z_A-Z])(?:(?:print|typeof|eval|__ctor__|to_string)|(?:bool|num|str|dict|list|RegExp|Type)(?=\\s*\\())"
				},
				{
					"name": "support.class.builtin.sny",
					"match": "(?<!(?<!\\.)\\.\\s*|[a-z_A-Z])(?:(?:Syntax|Type|Range|Reference|Internal)?Error|bool|num|str|dict|list|RegExp|Type|Range)(?![a-z_A-Z])"
				},
				{
					"name": "support.class.builtin.sny",
					"match": "(?<!(?<!\\.)\\.\\s*|[a-z_A-Z])(?:any|void|Function)(?![a-z_A-Z])"
				},
				{
					"name": "variable.language.sny",
					"match": "(?<!(?<!\\.)\\.\\s*|[a-z_A-Z])(it)(?![a-z_A-Z])"
				},
				{
					"name": "constant.language.sny",
					"match": "(?<!(?<!\\.)\\.\\s*|[a-z_A-Z])(?:true|false|null)(?![a-z_A-Z])"
				},
				{
					"name": "entity.name.function.sny",
					"match": "(?<![a-z_A-Z])[a-z_A-Z]+(?=\\s*(?:\\?\\.\\s*)?\\()",
					"comment": "abc()"
				}
			]
		}
	}
}