skip // breaks the current block

this
null

12345
12345.6789
123e+456
123.456e+789
0b10010
0x123ff
infy
nanu

{ identifier } // { identifierName: identifierValue }

"$(exp)"
"%%" // string receiver

/(?:)/

// operators
number + number
number - number
number * number
number / number
number ^ number
number % number
number ~ number -> Range
exp =(identifier > exp // tube expression
receiver << value
value >> receiver
exp and exp // logical and
exp AND exp // binary and
exp or exp
exp OR exp
exp in iterable -> Boolean
value from class // instanceof
exp ?? exp
exp . prop
exp ?. prop
function ?. ()

boolean ? exp // inline if

// prefixes
- number
+ number
++ number // returns number + 1 and sets number to number + 1
-- number // returns number - 1 and sets number to number - 1

// suffixes
number ++ // returns number and sets number to number + 1
number -- // returns number and sets number to number - 1
exp [identifier]

// keywords
delete id

async fun function(): do
generator fun function(): do
async generator fun function(): do

await asyncFunction!

if exp: do
else: do

with exp: do

when exp {
	is exp: do
	is a, b: do
	otherwise: do
}

foreach value in iterable {
	next
	break
}
foreach key, value of object: do
while exp: do

return exp

do: do // eq. () =>

import file
import "path/to/file.extension"
import property from file
import * from filename
import file as type // import config as json
import a, b, c

try: do
on errorname: do // catch

class ClassName? {
	publ static identifier = value
	publ identifier = value
	priv identifier = value

	publ {
		identifier  = value
		identifier  = value
	}

	static {
		publ {
			// ...
		}
		priv {
			// ...
		}
	}
}

// functions
print("string")
write("string")
isset(object.prop)
typeof(value)
read!
exit(0)

// classes
Value

Boolean()
Number()
String()

new Object()
new Array()
new Function()
new Promise()
new RegExp()
new Date()
new Range() // number ~ number

// types
varbl name = value
varbl name: Type = value
const name = value
const name later
fun name(params): do
class Name: do

varbl a, b, c // unset
varbl a, b, c = c, b, a // reverse
varbl a = exp, b = exp
varbl { prop, "invalidentifier syntax" as validentifier yntax } = object // varbl [prop, validentifier yntax] = [object.prop, object["invalidentifier syntax"]]
varbl [ prop ] = array // varbl prop = array[0]
varbl("invalidentifier syntax")

u12
u32
u64

bit
i16
i32
i64
big

f32
f64

// other
import math /*{
	random()
	max()
	min()
}*/

import intl /*{
	numberFormat()       // ("es-es", 209329)    -> "209.329"
	dateTimeFormat()     // (new Date)           -> "02/05/2026 03:56 a. m."
	relativeTimeFormat() // ("es-es", 2, "days") -> "Pasado mañana"
	listFormat()         // ["a", "b", "c"]      -> "a, b, and c"
	compare()            // ("es-es", "Á", "a")  -> 0
	segment()            // split words ("Hello world" => ["Hello", "world"])
	char {
		isUpper()
		isLower()
		isDigit()
		isHexDigit()
		isSpace()
		isPrintable()
	}
}*/

async fun fetch(url) {
	doAsyncStuff()
}

do! {
	import fetch
	import parse from json
	fetch("8.8.8.8").then(res => (print) parse(res))
}

fun main!:
	print("Hello world!")