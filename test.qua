skip // breaks the current block, eq. return null

this
null

12345
12345.6789
123e+456
123.456e+789
0b10010
0x123ff
infy
nanu

{ id } // { id: id }

"$(exp)"
"%%" // string receiver

/(?:)/

// operators
number + number
number - number
number * number
number / number
number ^ number
number % number
number ~ number
exp =(id)> exp // tube expression
receiver << value
value >> receiver // calls the receiver function with the passed value. Eq. getInternal(receiver, "receive")(value)
exp and exp // logical and
exp AND exp // binary and
exp or exp
exp OR exp
exp in iterable
value from class // instanceof
exp ?? exp
exp . prop
exp ?. prop
function ?. ()

// prefixes
- number
+ number
++ number // returns number + 1 and sets number to number + 1
-- number // returns number - 1 and sets number to number - 1
& id
& number // mempos

// suffixes
number ++ // returns number and sets number to number + 1
number -- // returns number and sets number to number - 1
exp ["id"]

// keywords
delete id
delete mempos

async function
generator function
async generator function

await asyncFunction()

if exp: do
else: do

with exp: do

when exp {
  is exp: do
  is a, b: do
  otherwise: do
}

foreach value in iterable {
  next
  break
}
foreach key, value of object: do
while exp: do

return exp

do: do // eq. () =>

import file
import "path/to/file.extension"
import property from file
import * from filename
import file as type // import config as json
import a, b, c

try: do
on errorname: do // catch

class ClassName? {
  publ static id = value
  publ id = value
  priv id = value

  publ {
    id1 = value
    id2 = value
  }

  static {
    publ {
      // ...
    }
    priv {
      // ...
    }
  }
}

// functions
print("string")
write("string")
isset(object.prop)
typeof(value)
read()
exit(0)

// classes
Value

Boolean()
Number()
String()

new Object()
new Array()
new Function()
new Promise()
new RegExp()
new Date()
new Range() // number ~ number
new File()

// types
varbl
const
fun
class

varbl a, b, c // unset
varbl a, b, c = c, b, a // reverse
varbl a = exp, b = exp
varbl { prop, "invalid-syntax" as validSyntax } = object // varbl [prop, validSyntax] = [object.prop, object["invalid-syntax"]]
varbl [ prop ] = array // varbl prop = array[0]
varbl("invalid-syntax")

// other
import math /*{
  random()
  max()
  min()
}*/

import intl /*{
  numberFormat()       // ("es-es", 209329)    -> "209.329"
  dateTimeFormat()     // (new Date)           -> "02/05/2026 03:56 a. m."
  relativeTimeFormat() // ("es-es", 2, "days") -> "Pasado mañana"
  listFormat()         // ["a", "b", "c"]      -> "a, b and c"
  compare()            // ("es-es", "Á", "a")  -> 0
  segment()            // split words
  char {
    isUpper()
    isLower()
    isDigit()
    isHexDigit()
    isSpace()
    isPrintable()
  }
}*/

async fun fetch(url) {
  doAsyncStuff()
}

import json
fetch("8.8.8.8")
  .then(json.parse)