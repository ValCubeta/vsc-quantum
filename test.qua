varbl
  num = 0123456789;
  num = 1234e+5678; // infy
const hex = 0x09abcdef; // 162254319
const bin = 0b00011101; // 29
const str = "Hello world!";
const boo = true;
const obj = { num }; // { num: num }
const arr = [ num, hex, bin ];
const rex = /my\s+regular\s+expression\n?/i;

Number.parse("123")

fun yommy(a, b) {
  return a + b;
}

class Pet {
  own priv count = 0;
  oncreate({ name, age }) {
    this.add(name, age);
    count++;
  }
  toString() => "%% { name: $(this.name), age: $(this.age) }" << this.getInternal("class").name;
}

class Dog: Pet {
  woof() {
    print("$(this.name or "A dog"): Woof!");
  }
}

class Cat: Pet {
  meow() {
    print("$(this.name or "A cat"): Meow!");
  }
}

2 =(num)> num in 0 ~ 10 =(inRange)> if inRange: print("num in range!");





this                     // represents the current object: created object in classes, refer itself when creating an object or the program globally.
null                     // just a null value without properties
infy                     // represents the infinite number
nanu                     // Not a number

12345                    // int literal
12345.6789               // float literal
123e+456                 // integer elevation expression
0b10010                  // binary integer expression
0x123ff                  // hexadecimal integer expression
{}                       // object literal
[]                       // array literal
""                       // string literal
"$(exp)"                 // template string expression
"%%"                     // string receiver
/(?:)/                   // (empty) regexp literal

// OPERATORS
number + number          // sum
number - number          // sub
number * number          // mul
number / number          // div
number ^ number          // pow
exp =(id or mempos)> exp // tube expression
receiver << value
or value >> receiver     // calls the receiver function with the passed value. Eq. receiver#receive(value)

// PREFIXES
- number                 // negates the number. if the number is negative turns to positive. also works with infiny
+ number                 // re-evaluates the number. if the number is an Number object, returns its value. if the number is a string, is evaluated as a number value. otherwise returns null
++ number                // returns number + 1 and sets number to number + 1
-- number                // returns number - 1 and sets number to number - 1

// SUFFIXES
number ++                // returns number and sets number to number + 1
number --                // returns number and sets number to number - 1

division / division
/regex/
// comment
/* comment */

2 / 2 // c

/r/ / /r/ // c

if /[0-9]+/.test(i) and a / 2 > 50: skip; // ??

/r/ / /r/ // c
with test()


a/r//c

1 / 2 // 5
a / b // c

/a/DgImSuY.test

class Extending << class Extended:
  oncreate():
    print("Hello from %%" << this::class.name);
{ lock oncreate; }

const extending = new Extending;

try:
  extending::class.oncreate = null;
on error:
  print("Locked property");

if /hello/.test(message) and message.length / 2 < 5: // idk
  print(/regex/);